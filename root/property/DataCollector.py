import time
from threading import Thread
from root.inheritance.CPUMetric import CPUMetric
from root.inheritance.MemoryMetric import MemoryMetric
from root.inheritance.DiskMetric import DiskMetric
from root.inheritance.NetworkMetric import NetworkMetric
import random

class DataCollector:
    def __init__(self, servers, interval=10):
        self.servers = servers
        self.interval = interval
        self.custom_intervals = {}
        self.collecting = False
        self.collected_data = []

    def set_interval(self, server_type, interval):
        self.custom_intervals[server_type] = interval
        print(f"‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–µ—Ä–≤–µ—Ä—ñ–≤ —Ç–∏–ø—É '{server_type}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {interval} —Å–µ–∫—É–Ω–¥.")

    def start_collection(self):
        if not self.collecting:
            self.collecting = True
            print("üìä –ó–∞–ø—É—Å–∫ –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫...")
            self.collection_thread = Thread(target=self._collect_data_loop)
            self.collection_thread.start()
        else:
            print("‚ö†Ô∏è –ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.")

    def stop_collection(self):
        if self.collecting:
            self.collecting = False
            self.collection_thread.join()
            print("üõë –ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
        else:
            print("‚ÑπÔ∏è –ó–±—ñ—Ä –º–µ—Ç—Ä–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π.")

    def _collect_data_loop(self):
        while self.collecting:
            metrics = self.collect_data()
            self.collected_data.extend(metrics)
            print(f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ {len(metrics)} –º–µ—Ç—Ä–∏–∫.")
            time.sleep(self.interval)

    def collect_data(self):
        if not self.servers:
            print("‚ÑπÔ∏è –ù–µ–º–∞—î —Å–µ—Ä–≤–µ—Ä—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
            return []

        metrics = []
        timestamp = time.time()

        for server in self.servers:
            cpu = random.randint(0, 100)
            mem = random.randint(0, 100)
            disk = random.randint(0, 100)
            net = random.randint(0, 2000)

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
            interval = self.custom_intervals.get(server.server_type, self.interval)
            
            metrics.append(CPUMetric(cpu, timestamp, server.name))
            metrics.append(MemoryMetric(mem, timestamp, server.name))
            metrics.append(DiskMetric(disk, timestamp, server.name))
            metrics.append(NetworkMetric(net, timestamp, server.name))

        return metrics

    def process_data(self):
        if not self.collected_data:
            print("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        else:
            print("üîÑ –û–±—Ä–æ–±–∫–∞ –∑—ñ–±—Ä–∞–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫...")
            for data in self.collected_data:
                print(f"  üìå {data}")
            self.collected_data.clear()
            print("‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def add_server(self, server):
        self.servers.append(server)
        print(f"‚ûï –°–µ—Ä–≤–µ—Ä {server.name} –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")

